1. 패키지(package)
    - 완전한 어플리케이션 ex) devtools(nodedaemon, babel, webpack)
    - 코드 샘플, 프로젝트에서 사용하는 모듈

2. 의존성(dependancy)
    - 개발하고 있는 프로젝트(어플리케이션, 패키지)에서 설치하고 사용하는 다른 패키지

    - 일반 의존성(general dependancy)
        개발하고 있는 프로젝트에서 사용하는 패키지로 꼭 배포에 포함됨
        $ npm i ...
    - 개발 의존성(development dependancy - 프로그램이 제작되고 나서 배포할 때에는, 개발에 관련된 것들은 제외하고 배포해야 하므로)
        개발에 필요하거나 도움이 되는 패키지(dev tools) 배포에 포함되지 않는다.
        $ npm i -D

    
3. 패키지 설치 방식
    1) 전역 설치(global)
        node 설치 경로
        -node
            -bin
            -npm
            vode
        -node-moudle
        위와 같이, 노드가 설치되어 있는 그 위치 어딘가에 설치된다.(이렇게 설치하는 일이 자주 있지는 않음, 공통 라이브러리)

        여러 프로젝트에서 공통으로 사용하는 도구 설치
        $ npm i -g
    2) 지역 설치(project local)

        특정 프로젝트에만 종속적인 도구나 라이브러리들
        $ npm i
        $ npm i -D

    3) 패키지 설치
        [project-ex01] $ npm i ejs           (local install, general dependancy)
        [project-ex01] $ npm i -D nodemon (local install, development dependancy)
        [project-ex01] $ npm i -g gulp       (global install)
            - 개발할 때만 쓰는 빌드 툴

    4) 패키지 삭제
        [project-ex01] $ npm un ejs          (local install 삭제)
        [project-ex01] $ npm un -D nodemon(local install 삭제)
        [project-ex01] $ npm un -g gulp      (global install 삭제)


4. Node(JavaScript) Project(C/S Application, Package) 생성
    1) 프로젝트 디렉토리 생성       (mkdir)
    2) 프로젝트 이동
    3) [project-ex01] $ npm init (npm 초기화)
        package name: (project-ex01)
        version: (1.0.0)                                                                                                                                                                                              
        description:                                                                                                                                                                                                  
        entry point: (index.js)                                                                                                                                                                                       
        test command:                                                                                                                                                                                                 
        git repository:                                                                                                                                                                                               
        keywords:                                                                                                                                                                                                     
        author:                                                                                                                                                                                                       
        license: (ISC)      
        순서대로 입력 후, package.json 확인

        npm init -y 입력 시, 자동으로 전부 입력됨

        npm init -y (프로젝트 매니페스트 파일(package.json) 생성, 프로젝트 초기화)

5. Module
    1) 코어 모듈(fs, os, ..... node에서 제공해주는 모듈)
    2) 파일 모듈: 파일 경로를 불러와서 모듈안의 객체, 함수, 클래스를 사용한다.
    3) npm 모듈: npm을 통해서 node_module에서 설치해서 사용하는 모듈
        - 로컬 배포
        - 원격 배포

6. npmjs.com npm repository에 패키지 배포
    1. 사용자 등록
    2. 배포
        $ npm adduser
        Username: ...
        Password: ...
        [douzone-bipa-math] $ npm publish

7. helloweb-ex01: 맨바닥에서 웹애플리케이션 만들어 보기
    1. app01: based on http : core module
    2. app02: based on http, fs: core module
    3. app03: based on connect, serve-static: npm package
    4. app04: based on connect, serve-static, connect-route: npm package

8. helloweb-ex02: express 프레임워크 기반의 웹애플리케이션 만들기
    1)
    [helloweb-ex02] $ npm init -y

    2)
    [helloweb-ex02] $ npm i express
    [helloweb-ex02] $ npm i ejs
    [helloweb-ex02] $ npm i -D nodemon; => 실행 방법 nodemon app03

    3)
    package.json 스크립트
        "scripts":{
          "start": "node index.js",
          "debug": "nodaemon index.js"
        }

    [helloweb-ex02] $ npm start         (운용시)
    [helloweb-ex02] $ npm run debug     (개발시)

    4) 디렉토리 구조 
    
    [helloweb-ex02] $ mkdir public
    [helloweb-ex02] $ mkdir routes
    [helloweb-ex02] $ mkdir controllers
    [helloweb-ex02] $ mkdir models
    [helloweb-ex02] $ mkdir views

9. emaillist(models based on mysql) - 기본 SQL 기반
    1) 프로젝트 초기화 작업
    [emaillist] $ npm init -y

    2)
    [emaillist] $ npm i express
    [emaillist] $ npm i ejs
    [emaillist] $ npm i mysql2 : 노트 기반 mysql 라이브러리
    [emaillist] $ npm i -D nodemon; => 실행 방법 nodemon app03

    3)
    package.json 스크립트
        "scripts":{
          "start": "node index.js",
          "debug": "nodaemon index.js"
        }

    [emaillist] $ npm start         (운용시)
    [emaillist] $ npm run debug     (개발시... Live Update)

    4) 디렉토리 구조 
    
    [emaillist] $ mkdir public
    [emaillist] $ mkdir routes
    [emaillist] $ mkdir controllers
    [emaillist] $ mkdir models
    [emaillist] $ mkdir views

10. guestbook(models based on mysql) - 기본 SQL 기반
    1) 프로젝트 초기화 작업
    [guestbook] $ npm init -y

    2)
    [guestbook] $ npm i express
    [guestbook] $ npm i ejs
    [guestbook] $ npm i mysql2 : 노트 기반 mysql 라이브러리
    [guestbook] $ npm i -D nodemon => 실행 방법 nodemon app03

    3)
    package.json 스크립트
    package.json에서 스크립트 부분을 변경
        "scripts":{
          "start": "node index.js",
          "debug": "nodemon index.js"
        }

    [guestbook] $ npm start         (운용시)
    [guestbook] $ npm run debug     (개발시... Live Update)

    4) 디렉토리 구조 
    
    [guestbook] $ mkdir public
    [guestbook] $ mkdir routes
    [guestbook] $ mkdir controllers
    [guestbook] $ mkdir models
    [guestbook] $ mkdir views

11. mysite(models based on Sequelizer) - ORM 기반

1. ORM(sequelize)
2. user(session, 인증, 접근제어), jQuery(ajax) + API
3. views -> include(ejs)
4. dotenv(configuration DB connection, port, static directory)
5. log(winston)
6. fileupload(multer)
7. error 처리